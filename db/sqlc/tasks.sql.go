// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: tasks.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const changeDescription = `-- name: ChangeDescription :exec
UPDATE "tasks" SET 
description = $1 
where name = $2
`

type ChangeDescriptionParams struct {
	Description sql.NullString `json:"description"`
	Name        string         `json:"name"`
}

func (q *Queries) ChangeDescription(ctx context.Context, arg ChangeDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, changeDescription, arg.Description, arg.Name)
	return err
}

const changeTaskDeadline = `-- name: ChangeTaskDeadline :exec
UPDATE "tasks" SET 
deadline = $1 
where name = $2
`

type ChangeTaskDeadlineParams struct {
	Deadline time.Time `json:"deadline"`
	Name     string    `json:"name"`
}

func (q *Queries) ChangeTaskDeadline(ctx context.Context, arg ChangeTaskDeadlineParams) error {
	_, err := q.db.ExecContext(ctx, changeTaskDeadline, arg.Deadline, arg.Name)
	return err
}

const changeTaskDone = `-- name: ChangeTaskDone :exec
UPDATE "tasks" SET 
done = $1 
where name = $2
`

type ChangeTaskDoneParams struct {
	Done sql.NullInt32 `json:"done"`
	Name string        `json:"name"`
}

func (q *Queries) ChangeTaskDone(ctx context.Context, arg ChangeTaskDoneParams) error {
	_, err := q.db.ExecContext(ctx, changeTaskDone, arg.Done, arg.Name)
	return err
}

const changeTaskName = `-- name: ChangeTaskName :exec
UPDATE "tasks" SET name = $1 where id = $2
`

type ChangeTaskNameParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) ChangeTaskName(ctx context.Context, arg ChangeTaskNameParams) error {
	_, err := q.db.ExecContext(ctx, changeTaskName, arg.Name, arg.ID)
	return err
}

const changeTaskOrder = `-- name: ChangeTaskOrder :exec
UPDATE "tasks" SET 
important = $1 
where name = $2
`

type ChangeTaskOrderParams struct {
	Important sql.NullInt32 `json:"important"`
	Name      string        `json:"name"`
}

func (q *Queries) ChangeTaskOrder(ctx context.Context, arg ChangeTaskOrderParams) error {
	_, err := q.db.ExecContext(ctx, changeTaskOrder, arg.Important, arg.Name)
	return err
}

const createTask = `-- name: CreateTask :one
INSERT INTO "tasks" 
(name, description, important, done, deadline)
VALUES ($1,$2,$3,$4,$5) RETURNING id, name, description, important, done, deadline, created_at
`

type CreateTaskParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Important   sql.NullInt32  `json:"important"`
	Done        sql.NullInt32  `json:"done"`
	Deadline    time.Time      `json:"deadline"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Name,
		arg.Description,
		arg.Important,
		arg.Done,
		arg.Deadline,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Important,
		&i.Done,
		&i.Deadline,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM "tasks" where name = $1
`

func (q *Queries) DeleteTask(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, name)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, name, description, important, done, deadline, created_at FROM "tasks" where name = $1
`

func (q *Queries) GetTask(ctx context.Context, name string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, name)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Important,
		&i.Done,
		&i.Deadline,
		&i.CreatedAt,
	)
	return i, err
}
