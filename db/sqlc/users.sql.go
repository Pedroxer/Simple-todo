// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users"
(username, password, email) 
values ($1,$2,$3) RETURNING id, username, password, email, created_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "users" where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const selectUser = `-- name: SelectUser :one
SELECT username, password, email 
FROM "users" where id = $1
`

type SelectUserRow struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) SelectUser(ctx context.Context, id int64) (SelectUserRow, error) {
	row := q.db.QueryRowContext(ctx, selectUser, id)
	var i SelectUserRow
	err := row.Scan(&i.Username, &i.Password, &i.Email)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "users" SET
    password = $2,
    email = $3
    where id = $1
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Password, arg.Email)
	return err
}
